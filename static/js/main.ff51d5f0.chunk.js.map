{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Phonebook.module.css","components/ContactElement/ContactElement.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactElement/ContactElement.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","ContactElement","id","name","number","deleteContact","className","s","button","type","onClick","prototype","PropTypes","string","isRequired","func","checkPropTypes","ContactList","contacts","console","log","list","map","item","arrayOf","object","ContactForm","state","handleChange","e","currentTarget","setState","value","handleSubmit","preventDefault","props","addContact","this","onSubmit","lableContact","inputContact","onChange","pattern","title","required","Component","defaultProps","Filter","findLable","find","filter","App","some","contact","includes","alert","uuidv4","prevState","changeFilter","getVisibleContact","normalizeTodo","toLowerCase","todoId","localStorage","getItem","parsedContacts","JSON","parse","prevProps","PrevState","setItem","stringify","visibleContact","container","phonebookContainer","contactsContainer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff51d5f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lableContact\":\"ContactForm_lableContact__3VcnJ\",\"inputContact\":\"ContactForm_inputContact__3lEsQ\",\"button\":\"ContactForm_button__28s5m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Phonebook_container__2e1li\",\"phonebookContainer\":\"Phonebook_phonebookContainer__3MXFV\",\"contactsContainer\":\"Phonebook_contactsContainer__1mvgU\",\"list\":\"Phonebook_list__20WWq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"ContactElement_number__345Ug\",\"button\":\"ContactElement_button__2_ik5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__2rNeq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"findLable\":\"Filter_findLable__1cCsQ\",\"find\":\"Filter_find__2H2VG\"};","import s from \"./ContactElement.module.css\";\nimport PropTypes from \"prop-types\";\n\nfunction ContactElement({ id, name, number, deleteContact }) {\n  return (\n    <p>\n      <span>{name}:</span>\n      <span className={s.number}>{number}</span>\n      <button\n        className={s.button}\n        type=\"button\"\n        onClick={() => deleteContact(id)}\n      >\n        Delete\n      </button>\n    </p>\n  );\n}\n\nContactElement.prototype = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nPropTypes.checkPropTypes(ContactElement);\n\nexport default ContactElement;\n","import ContactElement from '../ContactElement';\nimport s from './ContactList.module.css';\nimport PropTypes from 'prop-types';\n\nfunction ContactList({ contacts, deleteContact }) {\n  console.log(contacts);\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.item}>\n          <ContactElement\n            id={id}\n            name={name}\n            number={number}\n            deleteContact={deleteContact}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.prototype = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n  deleteContact: PropTypes.func.isRequired,\n};\n\nPropTypes.checkPropTypes(ContactList);\n\nexport default ContactList;\n","import { Component } from 'react';\nimport s from './ContactForm.module.css';\nimport PropTypes from 'prop-types';\n\nclass ContactForm extends Component {\n  static defaultProps = {\n    addContact: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    if (e.currentTarget.name === 'name') {\n      this.setState({\n        name: e.currentTarget.value,\n      });\n    }\n    if (e.currentTarget.name === 'number') {\n      this.setState({\n        number: e.currentTarget.value,\n      });\n    }\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.addContact(this.state);\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label className={s.lableContact}>\n          Name\n          <input\n            className={s.inputContact}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={this.handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n\n        <label className={s.lableContact}>\n          Number\n          <input\n            className={s.inputContact}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={this.handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n\n        <button className={s.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n\n// ContactForm.prototype = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.checkPropTypes(\n//       PropTypes.shape({\n//         id: PropTypes.string.isRequired,\n//         name: PropTypes.string.isRequired,\n//         number: PropTypes.number.isRequired,\n//       }).isRequired\n//     )\n//   ),\n//   addContact: PropTypes.func.isRequired,\n// };\n\n// PropTypes.checkPropTypes(ContactForm);\n","// import React from \"react\";\nimport s from \"./Filter.module.css\";\nimport PropTypes from \"prop-types\";\n\nfunction Filter({ value, onChange }) {\n  return (\n    <label className={s.findLable}>\n      Find contacts by name\n      <input\n        className={s.find}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      ></input>\n    </label>\n  );\n}\n\nFilter.prototype = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nPropTypes.checkPropTypes(Filter);\n\nexport default Filter;\n","import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n// import contacts from \"./components/contacts.json\";\nimport ContactList from './components/ContactList';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport s from './components/Phonebook.module.css';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    //  console.log(parsedContacts)\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, PrevState) {\n    if (this.state.contacts !== PrevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = ({ name, number }) => {\n    if (this.state.contacts.some(contact => contact.name.includes(name))) {\n      alert(`контакт ${name} уже существует`);\n      return;\n    }\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    this.setState(prevState => ({\n      contacts: [contact, ...prevState.contacts],\n    }));\n  };\n\n  changeFilter = e => {\n    console.log(e.currentTarget.value);\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  getVisibleContact = () => {\n    const { filter, contacts } = this.state;\n    // console.log(contacts);\n    const normalizeTodo = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeTodo),\n    );\n  };\n\n  deleteContact = todoId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== todoId),\n    }));\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    const isContactsIncludes = this.props.contacts.find(\n      contact => contact.name === name,\n    );\n\n    if (isContactsIncludes) {\n      return alert(`${name}is alredy in contacts`);\n    } else {\n      this.props.addContact(name, number);\n\n      this.setState({ name: '', number: '' });\n    }\n  };\n\n  render() {\n    const { filter } = this.state;\n    const visibleContact = this.getVisibleContact();\n    return (\n      <div className={s.container}>\n        <div className={s.phonebookContainer}>\n          <h1>Phonebook</h1>\n          <ContactForm addContact={this.addContact} />\n        </div>\n\n        <div className={s.contactsContainer}>\n          <h2>Contacts</h2>\n          <Filter value={filter} onChange={this.changeFilter} />\n          <ContactList\n            contacts={visibleContact}\n            deleteContact={this.deleteContact}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n"],"sourceRoot":""}